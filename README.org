* Design, Computing and Opportunities

** TL;DR

This repository is about

- Opportunities to create /Much Better Everything/
- Constructive Criticism of Existing Designs
- Identification of Fundamental Issues and Opportunities
- Identification of Low Hanging Fruit to exploit
- (mostly) Software System Design
- (indirectly) the Power, Creativity and Joy of Design!

** Inspirations
lim
- [[https://en.wikipedia.org/wiki/Victor_Papanek][Victor Papanek]]
      - especially his 1971 /Design for the Real World: Human Ecology and Social Change/
      - [[https://metropolismag.com/viewpoints/rereading-design-for-the-real-world/][2021 review of Design for the Real World]]
- [[https://en.wikipedia.org/wiki/Buckminster_Fuller][Buckminster Fuller]]
      - Very influential to me in my youth.
      - [[https://en.wikipedia.org/wiki/Ephemeralization][Ephemeralization]] :: deeper understanding allows doing more with less
      - [[https://en.wikipedia.org/wiki/Tensegrity][Tensegrity]]  :: tension over compression
      - Changing the scale of things changes their nature

** The Importance of Design

I look at the world through the lens of /Design/ rather than the lens of
/Styling/. Of course, many people use the term /Design/ as a fancy word for
/Styling/, as in /Hair Design/.

What I mean by /Design/ is the creative expression of structure which
- excellently serves a purpose
- is affordable and sustainable
- can be evolved and improved over time

Design has long been a passion of mine. I look at nearly everything through the
lens of design.

** Design in Computing

Most (but not all) of the Design Notes in this Repository relate to Computing.
Computing has fascinated me since childhood and has been my profession for most
of my adult life.

Even modest computers have the ability to magnify results a billion-fold, so the
quality of the design of computing systems is especially consequential. I've
been following developments in computing since childhood and I noticed some
recurring themes which have stifled good design and led to computer systems of
limited quality and power.

** Fast Growth, Confusion and Bad Habits

See [[file:Constructive-Criticism/computing-history-issues.org][Historical Baggage]] for details on how many bad habits emerged from the rapid
and chaotic growth of programmable electronic digital computers.

TL;dr:

- Instruction set design doesn't matter, just wire up whatever you want!
- Variables are just data stored at a particular memory location.
- Any part of a program can modify any "variable" at any time.
- Data is just bits which have no type (fixed meaning).
- A pointer variable can either hold the location of a variable or a special
  value called NULL which means it doesn't point to anything.

Almost any operation in a program could fail
- the program "should" check every operation for failure
- the code checking operations for failure could fail too!
- most code to check for possible errors is never put in or is wrong
- when programs go wrong
      - if you're lucky, they output an error message
      - if you're lucky, they "crash"
      - if you're unlucky
            - they output invalid data
            - which looks reasonable
            - and is believed to be correct!

Programs and databases are entirely separate things (really?)
- Databases have
      - integrity constraints
      - transactional persistence
- Programs ... don't!
- Databases are designed for
      - Smooth evolution to suit new purposes
      - Simultaneous use by multiple users
- Programs ... aren't!
- Most database systems are specialized for only a few kinds of data.
- Most programming systems let you do almost anything.
- Database experts often have very little understanding of programming.
- Most programmers have very little understanding of databases.

An ideal programming system would elegantly combine
- the best features of the best database systems
- the best features of the best programming languages
There seems to be no technical obstacle to creating such a system
- many such systems have been proposed and look promising
- no such system is generally available
Would you like to create (or help create) such a system?

Internet Servers and "personal" computers are entirely different things (really?)

Servers (especially servers distributed in "the cloud")
- Use reliable ECC (Error Corrected) memory?
- Have reliable, high-speed low-cost access to the Internet?
- Efficiently share processing resources and memory resources across tasks and clients?
- Replicate and distribute  storage and computation for reliability?
- Provide reliable, inexpensive, easy data backup?
- Are administered by expert system administrators
Yes, potentially, but
- Check all such claims carefully!

"Personal" Computers, including most computers used in offices
- Are driven by the game industry
- Are extraordinarily powerful in raw computing (and graphics) performance
- Might not be very reliable, e.g. usually lack ECC memory

It's possible to assemble a fairly inexpensive "Home-Office Server" with most of
the desirable features of a Cloud Server and most of the desirable features of a
desktop personal computer. Some System Administration skills may be needed to
obtain the desired benefits of such a system.

** Hardware Limitations Ease, Software Limitations Persist!

By the end of the 20th century computer systems were
- inexpensive
- highly reliable (if using ECC memory)

These limitations didn't start clearing up with common computing equipment until
the AMD64 architecture arrived in 1999.

The arrival of solid state disk drives and Gigabit (and better) Internet
Connections have also opened up possibilities, but easing memory constraints has
been a complete game changer.

The best systems of the 20th Century provide many examples of extraordinary
creative genius. Yet their full possibilities were often not followed up on
because they were /ahead of their time/. With the ending of these severe
constraints, we should be in a period of rapid progress in the power and quality
of systems. I don't see this as happening yet - so let's make it happen!

A common pattern over the last 50 years of computing has been

1. Some brilliant folks would develop a concept for making computers more
   powerful and more useful.
2. The idea would fail to achieve anywhere near its full potential, partly
   because of the severe limitations of computer systems of those early days -
   especially memory limitations.
3. Inferior designs would win out and become familiar and often standardized.
4. Newer systems would be build on top of such systems with their own potential
   limited or extinguished by the designs of the older parts.
5. Few would notice the missed opportunities because the systems behaved as
   expected.

Good news: Visionary projects which didn't get a chance to fulfill their
potential are now /valuable low-hanging fruit/.

*** Complexity in Computing is Deadly!

Even late 20th century 32-bit computer systems were capable of storing programs
of a size and complexity completely beyond any reasonable ability of competent
computer professionals to understand them. Indeed, many of the best modern
designs came about from more constrained 16-bit systems, e.g. Unix which set the
standard for most modern Operating Systems.

Ironically a lot of the unfortunate complexity of earlier systems was caused by
strategies for dealing with a lack of system capacities. For example, complex
data structures and intrinsic links were used rather than using a simple
relational model with indexes. We could have used increasing memory capacities
and increases in computational speed to /simplify/ and /generalize/ our software
systems, leading to software which was /easier to understand/ and /easier to
improve/. Instead, we simply wrote large amounts of code of often less quality
because we could get away with it in the short term. Older institutions are
burdened with vast amounts of unmaintainable code which they rely on for their
immediate operations.

As an example of a major missed opportunity: When the Y2K problem come along,
the ideal way forward would have been to replace the majority of huge old Cobol
programs with simple small programs interfacing with modern relational
databases. SQL is much more maintainable than procedural language code. Instead
armies of programmers were recruited - and hastily trained - to patch those old
systems, rendering them even less comprehensible. And deploying this army of
programmers to patch old code robbed the rest of our enterprises of essential
resources to create new software to fulfill their missions.
